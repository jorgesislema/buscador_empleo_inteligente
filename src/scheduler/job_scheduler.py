# -*- coding: utf-8 -*-
# /src/scheduler/job_scheduler.py

"""
M√≥dulo Programador de Tareas (Job Scheduler).

Utiliza la librer√≠a 'schedule' para ejecutar peri√≥dicamente el pipeline
principal de b√∫squeda de empleo definido en 'src.main'.

¬°Este es el piloto autom√°tico de nuestro buscador! üöÄ
"""

import schedule # La librer√≠a para programar tareas. ¬°A√±adir a requirements.txt!
import time     # Para pausar entre verificaciones de schedule.
import logging
from typing import Callable # Para type hints de funciones
import sys
from pathlib import Path

# A√±adimos la ra√≠z del proyecto para importar 'src'
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# Importamos nuestras utilidades y (¬°importante!) la funci√≥n principal de main
try:
    from src.utils import logging_config
    # --- ¬°ASUNCI√ìN IMPORTANTE! ---
    # Asumimos que en 'src/main.py' existir√° una funci√≥n llamada 'run_job_search_pipeline'
    # que se encargar√° de ejecutar todo el flujo (llamar scrapers/apis, filtrar, guardar).
    # Si la llamas diferente en main.py, ¬°hay que cambiar este import!
    from src.main import run_job_search_pipeline # except ImportError as e:
    print(f"Error: No se pudo importar 'run_job_search_pipeline' desde 'src.main' o 'logging_config'. {e}")
    print("Aseg√∫rate de que 'src/main.py' exista y contenga esa funci√≥n, y que el logging est√© configurado.")
    print("Este scheduler no funcionar√° sin la funci√≥n principal a ejecutar.")
    # Salimos si no podemos importar lo esencial.
    sys.exit(1)
except ModuleNotFoundError:
     # Esto puede pasar si src.main a√∫n no existe.
     print("ERROR: El m√≥dulo 'src.main' parece no existir a√∫n. Crea 'src/main.py' con la funci√≥n 'run_job_search_pipeline'.")
     # Definimos una funci√≥n dummy para que el resto del script no falle al cargar,
     # pero no har√° nada √∫til.
     def run_job_search_pipeline():
         print("ERROR: run_job_search_pipeline (de src/main.py) no est√° disponible!")
         pass # No hacer nada.
     # Configuraci√≥n b√°sica de logging en este caso
     logging.basicConfig(level=logging.INFO)


# Logger para el scheduler
logger = logging.getLogger(__name__)

# --- Tarea a Ejecutar ---

def _run_scheduled_job():
    """
    Funci√≥n que ser√° llamada por el scheduler. Ejecuta el pipeline principal.
    Incluye manejo de errores para que el scheduler no se detenga si falla una ejecuci√≥n.
    """
    logger.info("====== INICIANDO EJECUCI√ìN PROGRAMADA DEL PIPELINE ======")
    try:
        # ¬°Aqu√≠ llamamos a la funci√≥n principal de nuestro main.py!
        run_job_search_pipeline()
        logger.info("====== PIPELINE DE B√öSQUEDA EJECUTADO EXITOSAMENTE ======")
    except Exception as e:
        # ¬°Atrapamos cualquier error para que no rompa el bucle del scheduler!
        logger.exception("====== ¬°ERROR DURANTE LA EJECUCI√ìN PROGRAMADA DEL PIPELINE! ======")
        # Podr√≠amos a√±adir notificaciones aqu√≠ (email, Slack, etc.) si quisi√©ramos.
    finally:
        # Este bloque se ejecuta siempre, haya habido error o no.
        # Mostramos la pr√≥xima vez que se ejecutar√° la tarea.
        try:
             next_run_time = schedule.next_run
             if next_run_time:
                 logger.info(f"Pr√≥xima ejecuci√≥n programada para: {next_run_time.strftime('%Y-%m-%d %H:%M:%S')}")
             else:
                 logger.info("No hay m√°s ejecuciones programadas (esto no deber√≠a pasar en el bucle principal).")
        except Exception as e:
            logger.error(f"Error obteniendo la pr√≥xima hora de ejecuci√≥n: {e}")
        logger.info("====== FIN DE LA EJECUCI√ìN PROGRAMADA ======")


# --- Funci√≥n Principal del Scheduler ---

def start_scheduler(run_immediately: bool = False):
    """
    Configura el horario y arranca el bucle infinito del programador.

    Args:
        run_immediately (bool): Si es True, ejecuta la tarea una vez
                                al iniciar, adem√°s de programarla.
                                Defaults to False.
    """
    # Nos aseguramos de que el logging est√© configurado antes de empezar.
    try:
        logging_config.setup_logging()
    except Exception as e:
         logger.error(f"Error configurando el logging en start_scheduler: {e}")
         # Continuar sin configuraci√≥n avanzada puede ser problem√°tico, pero intentamos.

    logger.info("***** Iniciando el Job Scheduler *****")

    # --- Definir el Horario ---
    # ¬°Aqu√≠ es donde decimos cu√°ndo queremos que se ejecute!
    # Ejemplos:
    # schedule.every().day.at("03:00").do(_run_scheduled_job) # Todos los d√≠as a las 3:00 AM
    # schedule.every().hour.do(_run_scheduled_job)          # Cada hora
    # schedule.every(6).hours.do(_run_scheduled_job)        # Cada 6 horas
    # schedule.every().monday.at("09:00").do(_run_scheduled_job) # Los lunes a las 9 AM

    # Usemos una opci√≥n com√∫n: todos los d√≠as a una hora de baja actividad.
    # ¬°OJO! La hora es la del servidor donde corra el script.
    schedule_time = "03:00" # schedule.every().day.at(schedule_time).do(_run_scheduled_job)
    logger.info(f"Pipeline de b√∫squeda programado para ejecutarse todos los d√≠as a las {schedule_time}.")

    # Si queremos ejecutarlo una vez al arrancar (√∫til para probar)
    if run_immediately:
        logger.info("Ejecutando la tarea una vez inmediatamente al inicio...")
        _run_scheduled_job() # Lo llamamos directamente una vez.

    # Mostramos la primera ejecuci√≥n programada.
    try:
        first_run = schedule.next_run
        if first_run:
            logger.info(f"Primera ejecuci√≥n programada para: {first_run.strftime('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
         logger.error(f"Error obteniendo la primera hora de ejecuci√≥n: {e}")

    # --- Bucle Infinito del Scheduler ---
    # Este bucle mantiene el script vivo, revisando si hay tareas pendientes.
    logger.info("Entrando en el bucle principal del scheduler (Ctrl+C para salir)...")
    while True:
        try:
            # Comprueba si hay alguna tarea pendiente de ejecutar seg√∫n el horario.
            schedule.run_pending()
            # Esperamos un tiempo antes de volver a comprobar. No necesita ser s√∫per preciso.
            # Esperar 60 segundos es razonable para tareas diarias/horarias.
            time.sleep(60) # Dormir por 60 segundos.
        except KeyboardInterrupt:
             logger.info("Se recibi√≥ interrupci√≥n de teclado (Ctrl+C). Saliendo del scheduler.")
             break # Salir del bucle si presionamos Ctrl+C
        except Exception as e:
             # Capturar otros posibles errores en el propio bucle de schedule.
             logger.exception(f"Error inesperado en el bucle del scheduler: {e}")
             # Esperar un poco m√°s antes de reintentar para no saturar en caso de error persistente.
             time.sleep(300) # Esperar 5 minutos


# --- Punto de Entrada (si quisi√©ramos ejecutar este archivo directamente) ---
if __name__ == "__main__":
    # Esto permite lanzar el scheduler directamente con: python src/scheduler/job_scheduler.py
    # Aunque es m√°s limpio tener un script en /scripts/ para lanzarlo.
    print("Ejecutando el scheduler directamente...")
    # Podr√≠amos a√±adir un argumento para el --run-immediately aqu√≠ si quisi√©ramos
    # start_scheduler(run_immediately=True) # Ejemplo para ejecutar ya
    start_scheduler(run_immediately=False)